package com.java.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.struts2.interceptor.RequestAware;
import org.apache.struts2.interceptor.SessionAware;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.java.dao.pojo.RouteInfo;
import com.java.service.iservice.IOrdersService;
import com.java.service.iservice.ITicketService;
import com.opensymphony.xwork2.ModelDriven;

import hibernate.Orders;
import hibernate.Seat;
import hibernate.Ticket;
import hibernate.Train;
import hibernate.Uuser;

@Controller("ordersTicketAction")
@Scope("prototype")
public class OrdersTicketAction implements ModelDriven<Orders>, RequestAware ,SessionAware{
	@Autowired
	@Qualifier("ordersService")
	private IOrdersService ordersService;	

	private Orders orders = new Orders();
	private Map<String, Object> requestMap;
	private Map<String, Object> sessionMap;
	private String type;// 访问类型:是查询还是更新
	private String propName;// 查询条件:属性名
	private String propVal;// 属性值
	private String seat;
	private String tip;
	
	@Override
	public void setSession(Map<String, Object> sessionMap) {
		this.sessionMap = sessionMap;
	}
	
	public String getPropVal() {
		return propVal;
	}

	public void setPropVal(String propVal) {
		this.propVal = propVal;
	}

	public String getPropName() {
		return propName;
	}

	public void setPropName(String propName) {
		this.propName = propName;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	@Override
	public void setRequest(Map<String, Object> request) {
		this.requestMap = request;
	}

	@Override
	public Orders getModel() {
		return orders;
	}
	
	public String save() {
		//3.Huodechengkexinxi
		String msg = "error";
		Uuser uuser = (Uuser) sessionMap.get("uuser");
		if(uuser == null){
			return msg;
		}
		//生成订单
		//1.生成车票  
		RouteInfo routeInfo = (RouteInfo) sessionMap.get("routeInfo");
		
		//座位号 分配
		//获得起始站和终点站的序号
		int startStation = Integer.parseInt(routeInfo.getFromsiteorder());   //起始站  
		int endStation = Integer.parseInt(routeInfo.getTositeorder());  //终点站
		Integer seatnumber = 1;
		
		
		Date date = new Date();		
		Ticket ticket = new Ticket();
		Train train = new Train();
		train.setId(routeInfo.getTid());
		//2.车票数据封装
		ticket.setTrain(train);
		ticket.setTdate(date);
		ticket.setGnumber(routeInfo.getCarriages().get(0).getCnumber());
		ticket.setSeatnumber(seatnumber);
		ticket.setStartstation(routeInfo.getFromStation());
		ticket.setEndstation(routeInfo.getToStation());
		double price = routeInfo.getPrice();
		  /*硬座
		 一等座
		  特等座*/
		if("特等座".equals(seat)){
			price = routeInfo.getPrice()*3;
		}else if("一等座".equals(seat)){
			price = routeInfo.getPrice()*2;
		}
		ticket.setPrice(price);
		ticket.setUname(uuser.getName());
		ticket.setUtype(1);
		ticket.setUidnumber(uuser.getIdnumber());
		ticket.setSaletype(1);
		ticket.setSaletime(date);
		ticket.setStatus(1);
		ticket.setRevisetime(1);
		
		//3.生成席位
		Seat seat = new Seat();
		seat.setTrain(train);
		seat.setSdate(date);
		seat.setGnumber(routeInfo.getCarriages().get(0).getSeatnumber());
		seat.setSeatnumber(seatnumber);
		seat.setStartstation(routeInfo.getFromStation());
		seat.setEndstation(routeInfo.getToStation());
		seat.setStatus(1);
		//存储席位
		//System.out.println(seat.toString());
		//生产订单
		Orders orders2 = new Orders();
		orders2.setUuser(uuser);
		orders2.setTicket(ticket);
		orders2.setStatus(1);
		orders2.setMaketime(date);
		//System.out.println(orders2.toString());
		//return "success";
		//生成订单
		return ordersService.save(orders2,ticket,seat);
	}

	public String delete() {
		return ordersService.delete(orders);
	}

	public String update() {
		return ordersService.update(orders);
	}

	public String findAll() {
		String msg = "error";
		List<Orders> ordersList = ordersService.findAll();
		if (ordersList != null && ordersList.size() > 0) {
			requestMap.put("ordersListFromServer", ordersList);
			msg = "success";
		}
		return msg;
	}

	public String findById() {
		String msg = "error";
		Orders e = ordersService.findById(orders.getId());
		if (e != null) {
			List<Orders> ordersList = new ArrayList<Orders>();
			ordersList.add(e);
			requestMap.put("ordersListFromServer", ordersList);
			msg = "success";
		}
		return msg;
	}

	// 根据属性查询
	public String findByProperty() {
		String msg = "error";
		Object val = propVal;
		if("ordersno".equals(propName)){
			val = Integer.parseInt(propVal);
		}
		List<Orders> ordersList = ordersService.findByProperty(propName,val);//val是类型转换后的值
		if (ordersList != null && ordersList.size() > 0) {
			if ("update".equals(type)) {
				requestMap.put("orders", ordersList.get(0));
				msg = "updatesuccess";
			} else {
				requestMap.put("ordersListFromServer", ordersList);
				msg = "success";
			}
		}
		return msg;
	}

	public String getSeat() {
		return seat;
	}

	public void setSeat(String seat) {
		this.seat = seat;
	}

	public String getTip() {
		return tip;
	}

	public void setTip(String tip) {
		this.tip = tip;
	}
}
